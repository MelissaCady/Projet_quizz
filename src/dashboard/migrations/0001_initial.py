# Generated by Django 4.1.3 on 2022-11-07 14:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Answers",
            fields=[
                (
                    "codeanswer",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("answerlist", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={"db_table": "answers", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={"db_table": "auth_group", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[("id", models.BigAutoField(primary_key=True, serialize=False)),],
            options={"db_table": "auth_group_permissions", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={"db_table": "auth_permission", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={"db_table": "auth_user", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[("id", models.BigAutoField(primary_key=True, serialize=False)),],
            options={"db_table": "auth_user_groups", "managed": False,},
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[("id", models.BigAutoField(primary_key=True, serialize=False)),],
            options={"db_table": "auth_user_user_permissions", "managed": False,},
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.SmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={"db_table": "django_admin_log", "managed": False,},
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={"db_table": "django_content_type", "managed": False,},
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={"db_table": "django_migrations", "managed": False,},
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={"db_table": "django_session", "managed": False,},
        ),
        migrations.CreateModel(
            name="Employees",
            fields=[
                (
                    "matriculeemployee",
                    models.CharField(max_length=4, primary_key=True, serialize=False),
                ),
                (
                    "mailemployee",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "lastnameemployee",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("telemployee", models.IntegerField(blank=True, null=True)),
                ("firstname", models.CharField(blank=True, max_length=50, null=True)),
                ("zipcode", models.CharField(blank=True, max_length=50, null=True)),
                ("city", models.CharField(blank=True, max_length=50, null=True)),
                ("address", models.CharField(blank=True, max_length=50, null=True)),
                ("birthdate", models.DateField(blank=True, null=True)),
                ("codeadmin", models.IntegerField(blank=True, null=True)),
            ],
            options={"db_table": "employees", "managed": False,},
        ),
        migrations.CreateModel(
            name="Jobs",
            fields=[
                ("codejob", models.IntegerField(primary_key=True, serialize=False)),
                ("namejob", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={"db_table": "jobs", "managed": False,},
        ),
        migrations.CreateModel(
            name="Questions",
            fields=[
                (
                    "codequestion",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "titlequestion",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "coeffquestion",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "questionfeedback",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("imagequestion", models.BinaryField(blank=True, null=True)),
                ("questioncountdown", models.TimeField(blank=True, null=True)),
                ("answeriscorrect", models.BooleanField(blank=True, null=True)),
            ],
            options={"db_table": "questions", "managed": False,},
        ),
        migrations.CreateModel(
            name="Quizzes",
            fields=[
                (
                    "codequizz",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("namequizz", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={"db_table": "quizzes", "managed": False,},
        ),
        migrations.CreateModel(
            name="Resultats",
            fields=[
                ("coderesult", models.IntegerField(primary_key=True, serialize=False)),
                ("quizzresult", models.IntegerField(blank=True, null=True)),
                ("dateresultt", models.DateTimeField(blank=True, null=True)),
            ],
            options={"db_table": "resultats", "managed": False,},
        ),
        migrations.CreateModel(
            name="Services",
            fields=[
                (
                    "codeservice",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("nameservice", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={"db_table": "services", "managed": False,},
        ),
        migrations.CreateModel(
            name="Sessions",
            fields=[
                ("codesession", models.IntegerField(primary_key=True, serialize=False)),
                ("datedebutsession", models.DateTimeField(blank=True, null=True)),
                ("datefinsession", models.DateTimeField(blank=True, null=True)),
            ],
            options={"db_table": "sessions", "managed": False,},
        ),
        migrations.CreateModel(
            name="AvoirAcces",
            fields=[
                (
                    "matriculeemployee",
                    models.OneToOneField(
                        db_column="matriculeemployee",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.employees",
                    ),
                ),
            ],
            options={"db_table": "avoir_acces", "managed": False,},
        ),
        migrations.CreateModel(
            name="Comporter",
            fields=[
                (
                    "codequizz",
                    models.OneToOneField(
                        db_column="codequizz",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.quizzes",
                    ),
                ),
            ],
            options={"db_table": "comporter", "managed": False,},
        ),
        migrations.CreateModel(
            name="Composer",
            fields=[
                (
                    "codequizz",
                    models.OneToOneField(
                        db_column="codequizz",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.quizzes",
                    ),
                ),
            ],
            options={"db_table": "composer", "managed": False,},
        ),
        migrations.CreateModel(
            name="Constituer",
            fields=[
                (
                    "codequestion",
                    models.OneToOneField(
                        db_column="codequestion",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.questions",
                    ),
                ),
            ],
            options={"db_table": "constituer", "managed": False,},
        ),
        migrations.CreateModel(
            name="Posseder",
            fields=[
                (
                    "codeservice",
                    models.OneToOneField(
                        db_column="codeservice",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.services",
                    ),
                ),
            ],
            options={"db_table": "posseder", "managed": False,},
        ),
    ]
